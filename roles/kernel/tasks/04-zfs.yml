- name: install zfsbootmenu
  portage:
    package: sys-kernel/zfsbootmenu
    state: present
  notify: generate zbm

- name: generate hostid
  command: zgenhostid
  args:
    creates: /etc/hostid

- name: create dropbear directory
  file:
    dest: "/etc/dropbear"
    state: directory
    owner: root
    group: root
    mode: 0700

- name: generate ssh keys
  command: "ssh-keygen -m PEM -f {{ key.path }} -t {{ key.type }}"
  args:
    creates: "{{ key.path }}"
  loop:
    - path: "/etc/dropbear/id_rsa"
      type: rsa
    - path: "/etc/dropbear/id_ecdsa"
      type: ecdsa
  loop_control:
    loop_var: "key"
    label: "{{ key.path }}"

- name: enable zfs services
  service:
    name: "{{ service.name }}"
    enabled: true
    runlevel: "{{ service.runlevel }}"
    use: openrc
  loop:
    - name: zfs-import
      runlevel: boot
    - name: zfs-mount
      runlevel: boot
  loop_control:
    loop_var: "service"
    label: "{{ service.name }}"

- name: copy zfsbootmenu config
  copy:
    content: "{{ kernel_zfsbootmenu_config | to_nice_yaml }}"
    dest: "/etc/zfsbootmenu/config.yaml"
    owner: root
    group: root
    mode: 0644
  notify: generate zbm

- name: copy dracut config
  copy:
    content: "{{ kernel_zfsbootmenu_dracut_config }}"
    dest: "/etc/dracut.conf.d/zfsbootmenu.conf"
    owner: root
    group: root
    mode: 0644
  notify: generate zbm

- name: copy dracut configs
  block:
  - name: register present configs
    find:
      paths: "/etc/zfsbootmenu/dracut.conf.d/"
      patterns: ["kernel-*.conf"]
    register: _configs_present

  - name: copy configs
    copy:
      content: "{{ config.value }}"
      dest: "/etc/zfsbootmenu/dracut.conf.d/kernel-{{ config.key }}.conf"
      owner: root
      group: root
      mode: 0644
    loop: "{{ kernel_zfsbootmenu_dracut_configs | dict2items }}"
    loop_control:
      loop_var: "config"
      label: "{{ config.key }}"
    register: _configs_copied
    notify: generate zbm

  - name: delete configs
    vars:
      _present: "{{ _configs_present | json_query('files[*].path') | default([]) }}"
      _copied: "{{ _configs_copied | json_query('results[*].dest') | default([]) }}"
    file:
      path: "{{ item }}"
      state: absent
    loop: "{{ _present | difference(_copied) }}"
    notify: generate zbm
