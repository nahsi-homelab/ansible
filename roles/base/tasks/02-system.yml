- name: mount filesystems
  tags: system
  mount:
    src: "{{ fs.src }}"
    opts: "{{ fs.opts }}"
    path: "{{ fs.path }}"
    fstype: "{{ fs.type }}"
    state: mounted
  loop: "{{ base_filesystems }}"
  loop_control:
    loop_var: "fs"
    label: "{{ fs.path }}"
  when: base_filesystems is defined

- name: set sysctl entries
  tags: system
  sysctl:
    name: "{{ sysctl.name }}"
    value: "{{ sysctl.value }}"
    state: present
  loop: "{{ base_sysctl }}"
  loop_control:
    loop_var: "sysctl"
    label: "{{ sysctl.name }}"
  when: base_sysctl is defined

- name: set timezone
  tags: system
  copy:
    content: "{{ base_timezone }}"
    dest: /etc/timezone
    owner: root
    group: root
    mode: 0644
  notify: set timezone

- name: generate locales
  tags: system
  copy:
    content: "{{ base_locales | join('\n') }}"
    dest: /etc/locale.gen
    owner: root
    group: root
    mode: 0644
  notify: generate locales

- name: set consolefont
  tags: system
  copy:
    content: >
      consolefont={{ base_consolefont }}
    dest: /etc/conf.d/consolefont

- name: enable consolefint
  tags: system
  service:
    name: "consolefont"
    enabled: yes
    runlevel: "boot"
    use: openrc

- name: install ntpd
  tags: system
  portage:
    package: net-misc/openntpd
    state: present

- name: enable ntpd
  tags: system
  service:
    name: "ntpd"
    enabled: yes
    runlevel: "boot"
    use: openrc

- name: set hostname
  tags: system
  hostname:
    name: "{{ inventory_hostname }}"
    use: openrc

- name: configure /etc/hosts
  tags: system
  copy:
    dest: "/etc/hosts"
    content: "{{ base_hosts }}"
    owner: root
    group: root
    mode: 0644

- name: install openresolv
  portage:
    package: net-dns/openresolv
    state: present

- name: configure openresolv
  tags: system
  copy:
    content: "{{ base_dns }}"
    dest: /etc/resolvconf.conf
    owner: root
    group: root
    mode: 0644
  notify: run resolvconf
  when: base_dns is defined

- meta: flush_handlers

- name: install base packages
  tags: packages
  portage:
    package: "{{ item }}"
    state: present
  loop: "{{ base_packages }}"

- name: configure hwclock
  tags: system
  copy:
    content: "{{ base_hwclock }}"
    dest: /etc/conf.d/hwclock
    owner: root
    group: root
    mode: 0644
  when: base_hwclock is defined

- name: configure openrc
  tags: system
  copy:
    content: "{{ base_openrc }}"
    dest: /etc/rc.conf
    owner: root
    group: root
    mode: 0644
  when: base_openrc is defined

- name: set env vars with eselect
  tags: system
  eselect:
    module: "{{ eselect.module }}"
    target: "{{ eselect.target }}"
  loop: "{{ base_eselect }}"
  loop_control:
    loop_var: "eselect"
    label: "{{ eselect.module }}"
  notify: update env

- name: configure doas
  tags: system
  copy:
    content: "{{ base_doas_conf }}"
    dest: /etc/doas.conf
    owner: root
    group: root
    mode: 0644

- name: enable services
  tags: system
  service:
    name: "{{ service.name }}"
    enabled: yes
    runlevel: "{{ service.runlevel }}"
    use: openrc
  loop: "{{ base_services }}"
  loop_control:
    loop_var: "service"
    label: "{{ service.name }}"
  when: base_services is defined

- name: create zfs datasets
  tags: zfs
  zfs:
    name: "{{ dataset.name }}"
    state: present
    extra_zfs_properties: "{{ dataset.properties }}"
  loop: "{{ base_zfs_datasets }}"
  loop_control:
    loop_var: "dataset"
    label: "{{ dataset.name }}"
  when: base_zfs_datasets is defined

- name: ensure zfs datasets ownership
  tags: zfs
  file:
    path: "{{ dataset.properties.mountpoint }}"
    state: directory
    owner: "{{ dataset.owner | d('root') }}"
    group: "{{ dataset.group | d('root') }}"
    mode: "{{ dataset.mode | d('0755') }}"
  loop: "{{ base_zfs_datasets }}"
  loop_control:
    loop_var: "dataset"
    label: "{{ dataset.name }}"
  when:
    - base_zfs_datasets is defined
    - dataset.properties.mountpoint is defined

- meta: flush_handlers
