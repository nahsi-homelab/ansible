base_apcupsd_config: |
  ## apcupsd.conf v1.1 ##
  #
  # ========= General configuration parameters ============
  #

  UPSCABLE usb

  UPSTYPE net
  DEVICE {{ apcupsd_address }}

  POLLTIME 30

  LOCKFILE /run/apcupsd
  SCRIPTDIR /etc/apcupsd/scripts
  PWRFAILDIR /etc/apcupsd
  NOLOGINDIR /etc

  # The ONBATTERYDELAY is the time in seconds from when a power failure
  #   is detected until we react to it with an onbattery event.
  #
  #   This means that, apccontrol will be called with the powerout argument
  #   immediately when a power failure is detected.  However, the
  #   onbattery argument is passed to apccontrol only after the
  #   ONBATTERYDELAY time.  If you don't want to be annoyed by short
  #   powerfailures, make sure that apccontrol powerout does nothing
  #   i.e. comment out the wall.
  ONBATTERYDELAY 10

  #
  # Note: BATTERYLEVEL, MINUTES, and TIMEOUT work in conjunction, so
  # the first that occurs will cause the initation of a shutdown.
  #

  # If during a power failure, the remaining battery percentage
  # (as reported by the UPS) is below or equal to BATTERYLEVEL,
  # apcupsd will initiate a system shutdown.
  BATTERYLEVEL 25

  # If during a power failure, the remaining runtime in minutes
  # (as calculated internally by the UPS) is below or equal to MINUTES,
  # apcupsd, will initiate a system shutdown.
  MINUTES 5

  # If during a power failure, the UPS has run on batteries for TIMEOUT
  # many seconds or longer, apcupsd will initiate a system shutdown.
  # A value of 0 disables this timer.
  #
  #  Note, if you have a Smart UPS, you will most likely want to disable
  #    this timer by setting it to zero. That way, you UPS will continue
  #    on batteries until either the % charge remaing drops to or below BATTERYLEVEL,
  #    or the remaining battery runtime drops to or below MINUTES.  Of course,
  #    if you are testing, setting this to 60 causes a quick system shutdown
  #    if you pull the power plug.
  #  If you have an older dumb UPS, you will want to set this to less than
  #    the time you know you can run on batteries.
  TIMEOUT 0

  #  Time in seconds between annoying users to signoff prior to
  #  system shutdown. 0 disables.
  ANNOY 180

  # Initial delay after power failure before warning users to get
  # off the system.
  ANNOYDELAY 90

  # The condition which determines when users are prevented from
  # logging in during a power failure.
  # NOLOGON <string> [ disable | timeout | percent | minutes | always ]
  NOLOGON disable

  # If KILLDELAY is non-zero, apcupsd will continue running after a
  # shutdown has been requested, and after the specified time in
  # seconds attempt to kill the power. This is for use on systems
  # where apcupsd cannot regain control after a shutdown.
  # KILLDELAY <seconds>  0 disables
  KILLDELAY 0

  #
  # ==== Configuration statements for Network Information Server ====
  #

  # NETSERVER [ on | off ] on enables, off disables the network
  #  information server. If netstatus is on, a network information
  #  server process will be started for serving the STATUS and
  #  EVENT data over the network (used by CGI programs).
  NETSERVER on

  # NISIP <dotted notation ip address>
  #  IP address on which NIS server will listen for incoming connections.
  #  This is useful if your server is multi-homed (has more than one
  #  network interface and IP address). Default value is 0.0.0.0 which
  #  means any incoming request will be serviced. Alternatively, you can
  #  configure this setting to any specific IP address of your server and
  #  NIS will listen for connections only on that interface. Use the
  #  loopback address (127.0.0.1) to accept connections only from the
  #  local machine.
  NISIP 127.0.0.1

  # NISPORT <port> default is 3551 as registered with the IANA
  #  port to use for sending STATUS and EVENTS data over the network.
  #  It is not used unless NETSERVER is on. If you change this port,
  #  you will need to change the corresponding value in the cgi directory
  #  and rebuild the cgi programs.
  NISPORT 3551

  # If you want the last few EVENTS to be available over the network
  # by the network information server, you must define an EVENTSFILE.
  EVENTSFILE /var/log/apcupsd.events

  # EVENTSFILEMAX <kilobytes>
  #  By default, the size of the EVENTSFILE will be not be allowed to exceed
  #  10 kilobytes.  When the file grows beyond this limit, older EVENTS will
  #  be removed from the beginning of the file (first in first out).  The
  #  parameter EVENTSFILEMAX can be set to a different kilobyte value, or set
  #  to zero to allow the EVENTSFILE to grow without limit.
  EVENTSFILEMAX 25

  #
  # ========== Configuration statements used if sharing =============
  #            a UPS with more than one machine

  #
  # Remaining items are for ShareUPS (APC expansion card) ONLY
  #

  # UPSCLASS [ standalone | shareslave | sharemaster ]
  #   Normally standalone unless you share a UPS using an APC ShareUPS
  #   card.
  UPSCLASS standalone

  # UPSMODE [ disable | share ]
  #   Normally disable unless you share a UPS using an APC ShareUPS card.
  UPSMODE disable

  #
  # ===== Configuration statements to control apcupsd system logging ========
  #

  # Time interval in seconds between writing the STATUS file; 0 disables
  STATTIME 0

  # Location of STATUS file (written to only if STATTIME is non-zero)
  STATFILE /var/log/apcupsd.status

  # LOGSTATS [ on | off ] on enables, off disables
  # Note! This generates a lot of output, so if
  #       you turn this on, be sure that the
  #       file defined in syslog.conf for LOG_NOTICE is a named pipe.
  #  You probably do not want this on.
  LOGSTATS off

  # Time interval in seconds between writing the DATA records to
  #   the log file. 0 disables.
  DATATIME 0

  # FACILITY defines the logging facility (class) for logging to syslog.
  #          If not specified, it defaults to "daemon". This is useful
  #          if you want to separate the data logged by apcupsd from other
  #          programs.
  #FACILITY DAEMON

base_apcupsd_scripts:
  apccontrol: |
    #! /usr/bin/env bash
    APCPID=/run/apcupsd/apcupsd.pid
    APCUPSD=/sbin/apcupsd
    SHUTDOWN=/sbin/shutdown
    SCRIPTSHELL=/bin/bash
    SCRIPTDIR=/etc/apcupsd/scripts
    LOGGER="logger -t apccontrol"

    if [[ -f $SCRIPTDIR/config ]]; then
      source $SCRIPTDIR/config
    fi

    #
    # This piece is to substitute the default behaviour with your own script,
    # perl, or C program.
    # You can customize every single command creating an executable file (may be a
    # script or a compiled program) and calling it the same as the $1 parameter
    # passed by apcupsd to this script.
    #
    # After executing your script, apccontrol continues with the default action.
    # If you do not want apccontrol to continue, exit your script with exit
    # code 99. E.g. "exit 99".
    #
    if [ -f ${SCRIPTDIR}/${1} -a -x ${SCRIPTDIR}/${1} ]; then
      ${SCRIPTDIR}/${1} ${2} ${3} ${4}
      # exit code 99 means he does not want us to do default action
      if [[ $? = 99 ]] ; then
        exit 0
      fi
    fi

    case "$1" in
      killpower)
        echo "Apccontrol doing: ${APCUPSD} --killpower on UPS ${2}" | ${LOGGER}
        sleep 10
        ${APCUPSD} --killpower
        echo "Apccontrol has done: ${APCUPSD} --killpower on UPS ${2}" | ${LOGGER}
      ;;
      commfailure)
        echo "Warning communications lost with UPS ${2}" | ${LOGGER}
      ;;
      commok)
        echo "Communications restored with UPS ${2}" | ${LOGGER}
      ;;
      #
      # powerout, onbattery, offbattery, mainsback events occur
      #   in that order.
      #
      powerout) ;;
      onbattery)
        echo "Power failure on UPS ${2}. Running on batteries." | ${LOGGER}
        ;;
      offbattery)
        echo "Power has returned on UPS ${2}..." | ${LOGGER}
      ;;
      mainsback)
        if [[ -f /etc/apcupsd/powerfail ]]; then
           printf "Continuing with shutdown."  | ${LOGGER}
        fi
      ;;
      failing)
        echo "Battery power exhausted on UPS ${2}. Doing shutdown." | ${LOGGER}
      ;;
      timeout)
        echo "Battery time limit exceeded on UPS ${2}. Doing shutdown." | ${LOGGER}
      ;;
      loadlimit)
        echo "Remaining battery charge below limit on UPS ${2}. Doing shutdown." | ${LOGGER}
      ;;
      runlimit)
        echo "Remaining battery runtime below limit on UPS ${2}. Doing shutdown." | ${LOGGER}
      ;;
      doreboot)
        echo "UPS ${2} initiating Reboot Sequence" | ${LOGGER}
        ${SHUTDOWN} -r now "apcupsd UPS ${2} initiated reboot"
      ;;
      doshutdown)
        echo "UPS ${2} initiated Shutdown Sequence" | ${LOGGER}
        ${SHUTDOWN} -h now "apcupsd UPS ${2} initiated shutdown"
      ;;
      annoyme)
        echo "Power problems with UPS ${2}. Please logoff." | ${LOGGER}
      ;;
      emergency)
        echo "Emergency Shutdown. Possible battery failure on UPS ${2}." | ${LOGGER}
      ;;
      changeme)
        echo "Emergency! Batteries have failed on UPS ${2}. Change them NOW" | ${LOGGER}
      ;;
      remotedown)
        echo "Remote Shutdown. Beginning Shutdown Sequence." | ${LOGGER}
      ;;
      startselftest) ;;
      endselftest) ;;
      battdetach) ;;
      battattach) ;;
      *)	echo "Usage: ${0##*/} command"
        echo "	     warning: this script is intended to be launched by"
        echo "	     apcupsd and should never be launched by users."
        exit 1
      ;;
    esac
